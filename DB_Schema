-- Create the smis schema

  
CREATE SCHEMA IF NOT EXISTS smis;
USE smis;

-- ***************************************************************
-- User creation and privileges
-- ***************************************************************

-- Create student user
-- CREATE USER 'student'@'localhost' IDENTIFIED BY 'password_for_student';
-- GRANT SELECT, INSERT ON smis.* TO 'student'@'localhost';

-- Create faculty user
-- CREATE USER 'faculty'@'localhost' IDENTIFIED BY 'password_for_faculty';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON smis.* TO 'faculty'@'localhost';

-- Create manager user
-- CREATE USER 'manager'@'localhost' IDENTIFIED BY 'password_for_manager';
-- GRANT ALL PRIVILEGES ON smis.* TO 'manager'@'localhost';

-- Flush privileges to apply changes
FLUSH PRIVILEGES;

-- ***************************************************************
-- Table creation
-- ***************************************************************

-- Create department table
CREATE TABLE department (
    department_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT
);

-- Create student_address table
CREATE TABLE student_address (
    address_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    student_id BIGINT NOT NULL,
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code VARCHAR(10),
    country VARCHAR(255),
    FOREIGN KEY (student_id) REFERENCES student(student_id)
);

-- Create faculty_address table
CREATE TABLE faculty_address (
    address_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    faculty_id BIGINT NOT NULL,
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code VARCHAR(10),
    country VARCHAR(255),
    FOREIGN KEY (faculty_id) REFERENCES faculty(faculty_id)
);

-- Create manager_address table
CREATE TABLE manager_address (
    address_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    manager_id BIGINT NOT NULL,
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code VARCHAR(10),
    country VARCHAR(255),
    FOREIGN KEY (manager_id) REFERENCES manager(manager_id)
);

-- Create course table
CREATE TABLE courses (
    course_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    department_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    specialization VARCHAR(255),
    description TEXT,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
);

-- Create semester table
CREATE TABLE semester (
    semester_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    duration INT
);

-- Create semester_subject table
CREATE TABLE semester_subject (
    semester_subject_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    semester_id BIGINT NOT NULL,
    subject_id BIGINT NOT NULL,
    FOREIGN KEY (semester_id) REFERENCES semester(semester_id),
    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)
);

-- Create subject table
CREATE TABLE subjects (
    subject_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    course_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);

-- Create student table
CREATE TABLE student (
    student_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    date_of_birth DATE,
    department_id BIGINT,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
);

-- Create student_semester table
CREATE TABLE student_semester (
    student_semester_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    student_id BIGINT NOT NULL,
    semester_id BIGINT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES student(student_id),
    FOREIGN KEY (semester_id) REFERENCES semester(semester_id)
);

-- Create student_semester_subject table
CREATE TABLE student_semester_subject (
    student_semester_subject_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    student_semester_id BIGINT NOT NULL,
    subject_id BIGINT NOT NULL,
    FOREIGN KEY (student_semester_id) REFERENCES student_semester(student_semester_id),
    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)
);

-- Create faculty table
CREATE TABLE faculty (
    faculty_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    date_of_birth DATE,
    department_id BIGINT,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
);

-- Create manager table
CREATE TABLE manager (
    manager_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    date_of_birth DATE,
    department_id BIGINT,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
);

-- Create admin table
CREATE TABLE admin (
    admin_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    date_of_birth DATE
);


-- ***************************************************************
-- Done
-- ***************************************************************
